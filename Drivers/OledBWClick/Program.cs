using MBN;
using MBN.Enums;
using MBN.Modules;
using OLEDClickTestApp;
using Bitmap = MBN.Modules.Bitmap;
using System.Threading;

namespace Examples
{
    public class Program
    {
        private static OLEDWBClick _oled;

        public static void Main()
        {
            _oled = new OLEDWBClick(Hardware.SocketThree) { AutoRefresh = true };

            // Draw a bitmap to the OLED Display from an embedded resource.
            var logo = Bitmap.Parse(Resources.GetString(Resources.StringResources._16x16));
            _oled.DrawBitmap(logo.BitmapDataBytes, 0, 0, logo.Width, logo.Height, OLEDWBClick.Colors.White);

            Thread.Sleep(2000);
            _oled.ClearDisplay(false);

            // Draw a bitmap to the OLED Display using a byte array of the bitmap information.
            _oled.DrawBitmap(questionMark, 0, 0, 16, 16, OLEDWBClick.Colors.White);

            Thread.Sleep(2000);
            _oled.ClearDisplay(false);

            // Draw the MikroBusNet Logo to the OLED Display from an embedded resource.
            logo = Bitmap.Parse(Resources.GetString(Resources.StringResources.mbn_logo_white));
            _oled.DrawBitmap(logo.BitmapDataBytes, 0, 0, logo.Width, logo.Height, OLEDWBClick.Colors.White);

            Thread.Sleep(2000);
            _oled.ClearDisplay(false);

            //Draw a bitmap to the OLED Display using a byte array of the bitmap information. Tis is a full screen bitmap.
            _oled.DrawBitmap(mbn_logo, 0, 0, 96, 40, OLEDWBClick.Colors.White);

            Thread.Sleep(2000);
            _oled.ClearDisplay(false);

            // Draw some rectangles and a bitmap inside the inner rectangle
            _oled.DrawFilledRectangle(0, 0, 96, 40, OLEDWBClick.Colors.White);
            _oled.DrawFilledRectangle(10, 10, 76, 20, OLEDWBClick.Colors.Black);
            var bmp = Bitmap.Parse(Resources.GetString(Resources.StringResources._16x16));
            _oled.DrawBitmap(bmp.BitmapDataBytes, 11, 11, bmp.Width, bmp.Height, OLEDWBClick.Colors.White);

            Thread.Sleep(2000);
            _oled.ClearDisplay(false);

            // Draw a line or two and set some pixels.
            _oled.DrawLine(0, 20, 96, 20, OLEDWBClick.Colors.White);
            _oled.DrawLine(48, 0, 48, 40, OLEDWBClick.Colors.White);

            _oled.SetPixel(10, 10, OLEDWBClick.Colors.White);
            _oled.SetPixel(10, 11, OLEDWBClick.Colors.White);
            _oled.SetPixel(11, 10, OLEDWBClick.Colors.White);
            _oled.SetPixel(11, 11, OLEDWBClick.Colors.White);

            Thread.Sleep(2000);
            _oled.ClearDisplay(false);

            _oled.DrawLine(0, 0, 96, 40, OLEDWBClick.Colors.White);
            _oled.DrawLine(0, 40, 96, 0, OLEDWBClick.Colors.White);

            Thread.Sleep(2000);
            _oled.ClearDisplay(false);

            // Draw some non filled rectangles and a bitmap inside the inner rectangle
            _oled.DrawRectangle(0, 0, 96, 39, OLEDWBClick.Colors.White);
            _oled.DrawRectangle(10, 10, 76, 19, OLEDWBClick.Colors.White);
            _oled.DrawBitmap(bmp.BitmapDataBytes, 11, 11, bmp.Width, bmp.Height, OLEDWBClick.Colors.White);

            Thread.Sleep(2000);

            _oled.DisplayOn = false;
            Thread.Sleep(2000);
            _oled.DisplayOn = true;
            Thread.Sleep(1000);
            _oled.ClearDisplay(false);

            _oled.DrawCircle(10, 10, 10, OLEDWBClick.Colors.White);
            Thread.Sleep(1000);
            _oled.DrawFilledCircle(40, 10, 10, OLEDWBClick.Colors.White);

            // draw the first ~12 characters in the font
            //TestDrawChar();

            Thread.Sleep(1000);
            _oled.ClearDisplay(false);

            // Draw some characters to the display
            _oled.DrawChar(0, 0, 'A');
            _oled.DrawChar(0, 1, 'B');
            _oled.DrawChar(0, 2, 'C');
            _oled.DrawChar(0, 3, 'D');
            _oled.DrawChar(0, 4, 'E');


            Thread.Sleep(1000);
            _oled.ClearDisplay(false);

            _oled.DrawText(0, 0, "MikroBus.Net - Where MikroBus meets NetMF (www.mikrobusnet.org)");

            Thread.Sleep(5000);

            _oled.ScrollDisplayHorizontal(OLEDWBClick.ScrollDirection.Right, 0x00, 0x00, 0x04);
            Thread.Sleep(5000);
            _oled.StopScrolling();

            _oled.ScrollDisplayHorizontal(OLEDWBClick.ScrollDirection.Left, 0, 0, 4);
            Thread.Sleep(5000);
            _oled.StopScrolling();

            _oled.ScrollDisplayVertical(0x00);
            Thread.Sleep(5000);
            _oled.StopScrolling();

            _oled.ScrollDisplayDiagonal(OLEDWBClick.ScrollDirection.Right, 0x00, 0x00, 0x04);
            Thread.Sleep(5000);
            _oled.StopScrolling();
            _oled.ScrollDisplayDiagonal(OLEDWBClick.ScrollDirection.Left, 0x00, 0x00, 0x04);
            Thread.Sleep(5000);
            _oled.StopScrolling();

            Thread.Sleep(2000);

            _oled.DisplayOrientation = OLEDWBClick.Orientation.Flipped;
            Thread.Sleep(2000);
            _oled.DisplayOrientation = OLEDWBClick.Orientation.Normal;

            Thread.Sleep(2000);

            _oled.Zoom(true);
            Thread.Sleep(2000);
            _oled.Zoom(false);

            Thread.Sleep(2000);

            _oled.Fade(true);
            Thread.Sleep(10000);
            _oled.Fade(false);

            Thread.Sleep(2000);
            _oled.Contrast = 0;
            Thread.Sleep(2000);
            _oled.Contrast = 255;

            Thread.Sleep(2000);
            _oled.ClearDisplay(false);

            _oled.DrawText(0, 0, "Resetting OLED");
            Thread.Sleep(2000);
            _oled.Reset(ResetModes.Hard);
            _oled.DrawText(0, 0, "Reset Complete");

            Thread.Sleep(2000);

            _oled.ClearDisplay(false);
            _oled.DrawText(0, 0, "Setting Power Off");
            Thread.Sleep(2000);
            _oled.PowerMode = PowerModes.Off;
            _oled.PowerMode = PowerModes.On;
            _oled.ClearDisplay(false);
            _oled.DrawText(0, 0, "Power is On");
            _oled.DrawText(0, 4, "Test complete");
            _oled.ScrollDisplayHorizontal(OLEDWBClick.ScrollDirection.Left, 0, 4, 4);

        }

        #region User Bitmap Data

        private static readonly byte[] mbn_logo = {
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
		0x3F, 0x1F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x7F, 0x3F, 0x1F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F,
		0x3F, 0xFF, 0xFF, 0x3F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8,
		0xF0, 0x00, 0x00, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC,
		0xF8, 0xF0, 0x00, 0x00, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF9, 0xF9, 0x01, 0x01, 0xF9, 0xF9, 0x01, 0x03, 0xFF, 0xFF, 0x03,
		0x03, 0xFF, 0xFF, 0x00, 0x00, 0xCF, 0x87, 0x03, 0x31, 0x79, 0xFF, 0xFF, 0x00, 0x00, 0xF9, 0xF1,
		0xF3, 0xFF, 0x87, 0x03, 0x79, 0x79, 0x79, 0x03, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x07, 0xC7, 0xC7, 0xC7, 0xC7,
		0xC7, 0xC0, 0xC0, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0x07, 0x07, 0xC7, 0xC7, 0xC7, 0xC7,
		0xC7, 0xC7, 0xC0, 0xC0, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0x07, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0x1E, 0x1E, 0x1F, 0x9F, 0x9E, 0x9E, 0x9F, 0x1F, 0x1E, 0x3E, 0x7F, 0xFF, 0xFE,
		0xFE, 0x1F, 0x1F, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0x1E, 0x1F, 0xFF, 0xFE, 0x7E, 0x3F, 0x1F,
		0x1F, 0x9F, 0x9F, 0x9F, 0x9E, 0x9E, 0x9E, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x0F, 0x07, 0x00, 0x00, 0x07, 0x0F, 0x9F, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x0F, 0x07, 0x00, 0x00, 0x07, 0x0F, 0x9F, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x0F, 0x07, 0x00, 0x00, 0x07, 0x0F, 0x9F, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xF3, 0xF3, 0xF3, 0xF3, 0x63, 0x00, 0x00, 0x1C, 0xFF, 0xFF,
		0xFF, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xF8, 0xF0, 0xF0,
		0xF3, 0xE3, 0xE7, 0xE7, 0xE7, 0x67, 0x07, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC,
		0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
		};

        private static readonly byte[] questionMark = {
		0x00, 0x00, 0x00, 0x18, 0x24, 0x02, 0x02, 0x02, 0x82, 0x86, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

        #endregion

    }
}
